{"version":3,"file":"index.min.js","sources":["../src/translations.tsx","../src/helpers/localization.ts"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n} from 'react';\nimport {\n  findBestAvailableLanguage,\n  addEventListener,\n  removeEventListener,\n} from './helpers/localization';\n\nexport interface Translation {\n  [key: string]: any;\n}\n\nexport interface Language {\n  languageTag: string;\n  isRTL: boolean;\n}\n\nexport interface LanguageTranslations {\n  [key: string]: Translation;\n}\n\ninterface TranslationContext extends Language {\n  translations: LanguageTranslations;\n  setLanguage: (l: Language) => void;\n}\n\nconst TranslationsContext = createContext<TranslationContext>({\n  languageTag: 'en',\n  isRTL: false,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setLanguage: () => {},\n  translations: {},\n});\n\nfunction setGlobalSettings(l: Language) {\n  // change any global setting based on the lang active / selected\n}\n\nfunction getBrowserLanguage(\n  translations: Translation,\n  fallback: Language = { languageTag: 'en', isRTL: false }\n) {\n  const l = findBestAvailableLanguage(Object.keys(translations)) || fallback;\n  setGlobalSettings(l);\n  return l;\n}\n\nexport interface TranslationProviderProps {\n  translations: Translation;\n  fallback?: Language;\n}\n\nexport const TranslationsProvider: React.FC<TranslationProviderProps> = ({\n  translations,\n  fallback,\n  children,\n}) => {\n  const [{ languageTag, isRTL }, setLanguage] = useState(\n    getBrowserLanguage(translations, fallback)\n  );\n\n  const handleLanguageChange = useCallback(() => {\n    const l = getBrowserLanguage(translations, fallback);\n    setLanguage(l);\n    setGlobalSettings(l);\n  }, [translations, fallback]);\n\n  useEffect(() => {\n    addEventListener(handleLanguageChange);\n    return () => removeEventListener(handleLanguageChange);\n  }, [handleLanguageChange]);\n\n  return (\n    <TranslationsContext.Provider\n      children={children}\n      value={{\n        languageTag,\n        isRTL,\n        setLanguage,\n        translations,\n      }}\n    />\n  );\n};\n\nfunction useAvailableLanguages(): [Language[]] {\n  const t = useContext(TranslationsContext);\n  return [\n    (Object.keys(t.translations) || []).map((l) => ({\n      languageTag: l,\n      isRTL: t.translations[l].isRTL || false,\n    })),\n  ];\n}\n\nfunction useTranslationLanguage(): [Language, (l: Language) => void] {\n  const t = useContext(TranslationsContext);\n  return [\n    {\n      languageTag: t.languageTag,\n      isRTL: t.isRTL,\n    },\n    t.setLanguage,\n  ];\n}\n\nconst getTranslationFromString = (t: TranslationContext) => (\n  path: string\n): any => {\n  // eslint-disable-next-line dot-notation\n  const translation = t.translations[t.languageTag] || t.translations['en'];\n  if (path !== '') {\n    const paths = path.split('.');\n    let value = paths.reduce((a, v) => a && a[v], translation);\n    if (value === undefined) {\n      console.warn(`Missing translation ${path}`);\n      // eslint-disable-next-line dot-notation\n      value = paths.reduce((a, v) => a && a[v], t.translations['en']);\n    }\n    return value || path;\n  }\n  return translation;\n};\n\nfunction useTranslation(): (path: string) => any {\n  const t = useContext(TranslationsContext);\n  return getTranslationFromString(t);\n}\n\nexport {\n  useTranslation,\n  useTranslationLanguage,\n  useAvailableLanguages,\n};\n","function findBestAvailableLanguage(availableLanguages: string[]) {\n  const browserLanguages = navigator && navigator.languages;\n  if (browserLanguages) {\n    for (const bl in browserLanguages) {\n      for (const al in availableLanguages) {\n        if (browserLanguages[bl] === availableLanguages[al]) {\n          return {\n            languageTag: browserLanguages[bl],\n            isRTL: false,\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction addEventListener(handler: () => void) {\n  window.addEventListener('languagechange', handler)\n}\n\nfunction removeEventListener(handler: () => void) {\n  window.removeEventListener('languagechange', handler)\n}\n\nexport { findBestAvailableLanguage, addEventListener, removeEventListener }"],"names":["TranslationsContext","createContext","languageTag","isRTL","setLanguage","translations","getBrowserLanguage","fallback","availableLanguages","browserLanguages","navigator","languages","bl","al","findBestAvailableLanguage","Object","keys","_a","children","_b","useState","_c","handleLanguageChange","useCallback","l","useEffect","handler","window","addEventListener","removeEventListener","React","Provider","value","t","useContext","map","path","translation","paths","split","reduce","a","v","undefined","console","warn","getTranslationFromString"],"mappings":"8KA+BA,IAAMA,EAAsBC,gBAAkC,CAC5DC,YAAa,KACbC,OAAO,EAEPC,YAAa,aACbC,aAAc,KAOhB,SAASC,EACPD,EACAE,GAIA,oBAJAA,GAAuBL,YAAa,KAAMC,OAAO,IC7CnD,SAAmCK,GACjC,IAAMC,EAAmBC,WAAaA,UAAUC,UAChD,GAAIF,EACF,IAAK,IAAMG,KAAMH,EACf,IAAK,IAAMI,KAAML,EACf,GAAIC,EAAiBG,KAAQJ,EAAmBK,GAC9C,MAAO,CACLX,YAAaO,EAAiBG,GAC9BT,OAAO,GDuCPW,CAA0BC,OAAOC,KAAKX,KAAkBE,+BAUI,SAACU,OACvEZ,iBACAE,aACAW,aAEMC,EAAwCC,WAC5Cd,EAAmBD,EAAcE,IAD5Bc,OAAEnB,gBAAaC,UAASC,OAIzBkB,EAAuBC,eAAY,WACvC,IAAMC,EAAIlB,EAAmBD,EAAcE,GAC3CH,EAAYoB,KAEX,CAACnB,EAAcE,IAOlB,OALAkB,aAAU,WCxDZ,IAA0BC,ED0DtB,OC1DsBA,EDyDLJ,ECxDnBK,OAAOC,iBAAiB,iBAAkBF,GDyDjC,WAAM,OCtDjB,SAA6BA,GAC3BC,OAAOE,oBAAoB,iBAAkBH,GDqD9BG,CAAoBP,MAChC,CAACA,IAGFQ,wBAAC9B,EAAoB+B,UACnBb,SAAUA,EACVc,MAAO,CACL9B,cACAC,QACAC,cACAC,iDAMR,WACE,IAAM4B,EAAIC,aAAWlC,GACrB,MAAO,EACJe,OAAOC,KAAKiB,EAAE5B,eAAiB,IAAI8B,KAAI,SAACX,GAAM,OAC7CtB,YAAasB,EACbrB,MAAO8B,EAAE5B,aAAamB,GAAGrB,QAAS,+BAkCxC,WAEE,OApB+B,SAAC8B,GAA0B,OAAA,SAC1DG,GAGA,IAAMC,EAAcJ,EAAE5B,aAAa4B,EAAE/B,cAAgB+B,EAAE5B,aAAiB,GACxE,GAAa,KAAT+B,EAAa,CACf,IAAME,EAAQF,EAAKG,MAAM,KACrBP,EAAQM,EAAME,QAAO,SAACC,EAAGC,GAAM,OAAAD,GAAKA,EAAEC,KAAIL,GAM9C,YALcM,IAAVX,IACFY,QAAQC,KAAK,uBAAuBT,GAEpCJ,EAAQM,EAAME,QAAO,SAACC,EAAGC,GAAM,OAAAD,GAAKA,EAAEC,KAAIT,EAAE5B,aAAiB,KAExD2B,GAASI,EAElB,OAAOC,GAKAS,CADGZ,aAAWlC,oCA9BvB,WACE,IAAMiC,EAAIC,aAAWlC,GACrB,MAAO,CACL,CACEE,YAAa+B,EAAE/B,YACfC,MAAO8B,EAAE9B,OAEX8B,EAAE7B"}